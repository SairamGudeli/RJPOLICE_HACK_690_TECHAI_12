#### This is small Part of Our code we are working on code ####

import requests
import time
from datetime import datetime
import matplotlib.pyplot as plt

# List of cryptocurrencies to track
crypto_list = ['bitcoin', 'ethereum', 'litecoin', 'ripple', 'bitcoin-cash']

def get_crypto_data(crypto):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}"
    response = requests.get(url)
    data = response.json()
    return data

def get_crypto_price(crypto_data):
    price = crypto_data['market_data']['current_price']['usd']
    return price

def display_price_history(crypto, days=30, interval="daily"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    response = requests.get(url)
    data = response.json()
    prices = data['prices']

    dates = [item[0] for item in prices]
    dates = [datetime.fromtimestamp(date/1000.0).strftime('%Y-%m-%d') for date in dates]

    prices = [item[1] for item in prices]

    plt.plot(dates, prices)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'Price History of {crypto}')
    plt.show()

def live_track_and_show_history(crypto, show_history=True):
    crypto_data = get_crypto_data(crypto)
    print(f"The current price of {crypto} is ${get_crypto_price(crypto_data)}")

    if show_history:
        display_price_history(crypto)

while True:
    user_choice = input("Enter a cryptocurrency to track (q to quit): ").lower()

    if user_choice == "q":
        break

    live_track_and_show_history(user_choice)
    time.sleep(60)

print("Bye!")






#GUI
#### This is small Part of Our code we are working on code ####

import requests
import time
from datetime import datetime
import matplotlib.pyplot as plt

# List of cryptocurrencies to track
crypto_list = ['bitcoin', 'ethereum', 'litecoin', 'ripple', 'bitcoin-cash']

def get_crypto_data(crypto):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}"
    response = requests.get(url)
    data = response.json()
    return data

def get_crypto_price(crypto_data):
    price = crypto_data['market_data']['current_price']['usd']
    return price

def display_price_history(crypto, days=30, interval="daily"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    response = requests.get(url)
    data = response.json()
    prices = data['prices']

    dates = [item[0] for item in prices]
    dates = [datetime.fromtimestamp(date/1000.0).strftime('%Y-%m-%d') for date in dates]

    prices = [item[1] for item in prices]

    plt.plot(dates, prices)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'Price History of {crypto}')
    plt.show()

def live_track_and_show_history(crypto, show_history=True):
    crypto_data = get_crypto_data(crypto)
    print(f"The current price of {crypto} is ${get_crypto_price(crypto_data)}")

    if show_history:
        display_price_history(crypto)

while True:
    user_choice = input("Enter a cryptocurrency to track (q to quit): ").lower()

    if user_choice == "q":
        break

    live_track_and_show_history(user_choice)
    time.sleep(60)

print("Bye!")






#GUI
import tkinter
from tkinter import ttk
from tkinter import PhotoImage
import requests
from datetime import datetime
import matplotlib.pyplot as plt
import pandas as pd

root = tkinter.Tk()
root.title("Cryptocurrency Flow Investigation")
root.geometry("900x500")

text_label = tkinter.Label(root, text="Cryptocurrency Flow Investigation", font=("Time Of Roman", 18))
text_label.pack()

# Create PhotoImage instance
image_path = PhotoImage(file=r"C:\Users\admin\Downloads\1424856.png")  # Replace with your image path
bg_image = tkinter.Label(root, image=image_path)
bg_image.place(relheight=1, relwidth=1)

text_label = tkinter.Label(root, text="Cryptocurrency Flow Investigation", font=("Time Of Roman", 40))
text_label.pack()

# Combobox options
crypto_options = ["Bitcoin", "Ethereum", "Litecoin", "USD", "Binancecoin", "Ripple", "Solana", "Cardano",
                  "Polkadot", "Dogecoin", "Tron", "Chainlink", "Polygon", "Shiba", "Dai",
                  "bitcoincash", "Cosmos", ]  # Add more options as needed

# Variable to store selected cryptocurrency
selected_crypto = tkinter.StringVar()

# Function to handle Combobox selection
def on_crypto_select(event):
    selected_crypto.set(crypto_combobox.get())

# Create Combobox
crypto_combobox = ttk.Combobox(root, values=crypto_options, textvariable=selected_crypto, font=("Time Of Roman", 19))
crypto_combobox.set("Select Cryptocurrency")  # Set default text
crypto_combobox.pack(pady=20, padx=20, side=tkinter.TOP)
crypto_combobox.bind("<<ComboboxSelected>>", on_crypto_select)

def button1_click():
    crypto_to_track = selected_crypto.get().lower()  # Use the selected cryptocurrency
    live_track_and_show_history(crypto_to_track)

def button2_click():
    # Your code for button 2 here
    new_window = tkinter.Toplevel(root)
    new_window.title("Law and Rules")
    new_window.geometry("800x600")

    # Create and set background image for the new window
    new_image_path = PhotoImage(file="C:/Users/admin/Downloads/WhatsApp Image 2023-12-19 at 18.37.43_e85cbd8b.png")  # Replace with your image path
    new_bg_image = tkinter.Label(new_window, image=new_image_path)
    new_bg_image.place(relheight=1, relwidth=1)

    # Create and display content in the new window
    label = tkinter.Label(new_window, text="Summary of Cryptocurrency Regulation in India (2024):\n\n"
                                           "1. VDAs as Legal Tender:\n"
                                           "   • VDAs are not expressly regulated or prohibited.\n"
                                           "   • Individuals and entities allowed to hold, invest, and transact VDAs under existing laws.\n"
                                           "   • Government does not recognize cryptocurrencies as legal tender but acknowledges their dual nature.\n"
                                           "   • 2020 Supreme Court judgment highlights the evolving global understanding of VDAs.\n\n"
                                           "2. Sales Regulation:\n"
                                           "   • Legacy legislation triggers in certain circumstances.\n"
                                           "   • Regulatory mechanism based on VDA use case, treated as commodities/assets in some scenarios.\n"
                                           "   • Advertising guidelines set by the Advertising Standards Council of India in 2022.\n\n"
                                           "3. Taxation:\n"
                                           "   • Income from VDA trade subject to both direct (income tax) and indirect (GST) taxation.\n"
                                           "   • Finance Act 2022 introduces a 30% tax on income from VDA transfers.\n"
                                           "   • Guidelines for Exchanges and P2P transactions regarding withholding tax and GST.\n\n"
                                           "4. Money Transmission Laws and AML Requirements:\n"
                                           "   • RBI circulars regulate entities handling VDAs, following KYC, AML, and CFT requirements.\n"
                                           "   • Supreme Court overturns the ban on regulated entities dealing with VDAs.\n"
                                           "   • PMLA scope expanded to cover various VDA-related aspects, emphasizing regulatory oversight.\n"
                                           "   • CERT-In issues directions for virtual asset service providers, exchange providers, and custodian wallet providers to maintain KYC and transaction records for five years.\n\n"
                                           "5. Central Bank Digital Currency (CBDC):\n"
                                           "   • RBI initiates the e-Rupee CBDC pilot, broadening the definition of 'bank note' to include digital forms.\n\n"
                                           "6. RBI on Macro-Financial Risks:\n"
                                           "   • RBI addresses risks associated with VDAs, proposing three policy approaches: prohibition, containment, and regulation.\n"
                                           "   • Global coordination needed for evaluating risks, especially in Emerging Markets and Developing Economies.",
                            font=("Time Of Roman", 12), justify=tkinter.LEFT)
    label.pack(pady=20)

def button3_click():
    # Your code for button 3 here
    print("Button 3 clicked")


def button4_click():
    # Your code for button 4 here
    print("Button 4 clicked")

def button5_click():
    crypto_to_track = selected_crypto.get().lower()  # Use the selected cryptocurrency
    watch_trading_window(crypto_to_track)
    
def get_crypto_data(crypto):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}"
    response = requests.get(url)
    data = response.json()
    return data

def get_crypto_price(crypto_data):
        price = crypto_data['market_data']['current_price']['usd']
        return price
    
def display_price_history(crypto, days=30, interval="daily"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    response = requests.get(url)
    data = response.json()
    prices = data['prices']

    dates = [item[0] for item in prices]
    dates = [datetime.fromtimestamp(date / 1000.0).strftime('%Y-%m-%d') for date in dates]

    prices = [item[1] for item in prices]

    plt.plot(dates, prices)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'Price History of {crypto}')
    plt.show()

def live_track_and_show_history(crypto, show_history=True):
    crypto_data = get_crypto_data(crypto)

    if crypto_data is not None:
        current_price = get_crypto_price(crypto_data)
        if current_price is not None:
            print(f"The current price of {crypto} is ${current_price}")

            if show_history:
                display_price_history(crypto)

def get_transaction_details(api_key, transaction_id):
    base_url = f'https://api.blockchair.com/bitcoin/dashboards/transaction/{transaction_id}'

    try:
        response = requests.get(base_url, params={'key': api_key})
        response.raise_for_status()  # Raise HTTPError for bad responses
    except requests.exceptions.RequestException as err:
        print(f"Error: {err}")
        return None

    transaction_data = response.json()
    return transaction_data

def is_fraudulent(transaction_details):
    # Placeholder for basic fraud detection rules
    # Add your custom rules based on transaction features
    if 'inputs' in transaction_details and 'outputs' in transaction_details:
        if len(transaction_details['inputs']) > 10 or len(transaction_details['outputs']) > 10:
            return True

    return False

def detect_and_report_fraud(api_key, transaction_id):
    transaction_details = get_transaction_details(api_key, transaction_id)

    if transaction_details:
        if is_fraudulent(transaction_details):
            return f"Warning: Transaction {transaction_id} may be fraudulent."
        else:
            return f"Transaction {transaction_id} appears to be normal."
    else:
        return "Error: Unable to fetch transaction details."
def watch_trading_window(crypto):
    watch_window = tkinter.Toplevel(root)
    watch_window.title(f"Watch Trading - {crypto.capitalize()}")
    watch_window.geometry("800x600")

    # Your code for watching trading goes here
    # You can display real-time data, charts, or any other relevant information
    import pandas as pd

    # Load the dataset into a dataframe
    df = pd.read_csv("C:/Users/admin/Downloads/transaction_dataset 1.csv")

    # Perform data preprocessing if needed

    # Analyze trading patterns
    df['Avg_min_between_sent_tnx'] = df['Avg min between sent tnx']
    df['Avg_min_between_received_tnx'] = df['Avg min between received tnx']
    df['Time_diff_between_first_last'] = df['Time Diff between first and last (Mins)']

    # Identify suspicious transactions
    df['Sent_tnx_count'] = df['Sent tnx']
    df['Received_tnx_count'] = df['Received Tnx']
    df['Created_contracts_count'] = df['Number of Created Contracts']

    # Look for abnormal behavior
    df['Min_val_received'] = df['min value received']
    df['Max_val_received'] = df['max value received']
    df['Avg_val_received'] = df['avg val received']
    df['Min_val_sent'] = df['min val sent']
    df['Max_val_sent'] = df['max val sent']
    df['Avg_val_sent'] = df['avg val sent']
    df['Min_val_sent_to_contract'] = df['min value sent to contract']
    df['Max_val_sent_to_contract'] = df['max val sent to contract']
    df['Avg_val_sent_to_contract'] = df['avg value sent to contract']
    df['Total_transactions'] = df['total transactions (including tnx to create contract)']
    df['Total_ether_sent'] = df['total Ether sent']
    df['Total_ether_received'] = df['total ether received']
    df['Total_ether_sent_contracts'] = df['total ether sent contracts']
    df['Total_ether_balance'] = df['total ether balance']

    # Look for wash trading indicators

    # Example: addresses with a high number of transactions but a low total ether balance
    potential_wash_traders = df[(df['Total_transactions'] > 100) & (df['Total_ether_balance'] < 10)]

    # Print potential wash traders
    print(potential_wash_traders[['Address', 'Total_transactions', 'Total_ether_balance']])

button1 = tkinter.Button(root, text="Track Crypto", command=button1_click, bg="black", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button1.pack(pady=10, padx=10, side=tkinter.TOP)

button2 = tkinter.Button(root, text="Law and Rules", command=button2_click, bg="red", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button2.pack(pady=10, padx=10, side=tkinter.TOP)

button3 = tkinter.Button(root, text="Fraud Detection", command=button3_click, bg="yellow", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button3.pack(pady=10, padx=10, side=tkinter.TOP)

button4 = tkinter.Button(root, text="Education", command=button4_click, bg="orange", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button4.pack(pady=10, padx=10, side=tkinter.TOP)

button5 = tkinter.Button(root, text="Watch Trading", command=button5_click, bg="green", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button5.pack(pady=10, padx=10, side=tkinter.TOP)

root.mainloop()



#Fraud Dection
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PowerTransformer
from imblearn.over_sampling import SMOTE
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
import pickle

#Data Reading
df = pd.read_csv("C:/Users/admin/Downloads/transaction_dataset 1.csv" , index_col=0)
print(df.shape)
df.head()

# Ommit first two columns (Index, Adress)
df = df.iloc[:,2:]
df.info()

# Turn object variables into 'category' dtype for more computation efficiency
categories = df.select_dtypes('O').columns.astype('category')
df[categories]
for i in df[categories].columns:
  print(f'The categorical column --{i}-- has --{len(df[i].value_counts())}-- unique values')
numericals = df.select_dtypes(include=['float','int']).columns
df[numericals].describe()
df[numericals].var()
print(df['FLAG'].value_counts())

pie, ax = plt.subplots(figsize=[15,10])
labels = ['Non-fraud', 'Fraud']
colors = ['#f9ae35', '#f64e38']
plt.pie(x = df['FLAG'].value_counts(), autopct='%.2f%%', explode=[0.02]*2, labels=labels, pctdistance=0.5, textprops={'fontsize': 14}, colors = colors)
plt.title('Target distribution')
plt.show()
# Correlation matrix
corr = df.corr()

mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)]=True
with sns.axes_style('white'):
  fig, ax = plt.subplots(figsize=(18,10))
  sns.heatmap(corr,  mask=mask, annot=False, cmap='CMRmap', center=0, square=True)



###Data cleaning
# Visualize missings pattern of the dataframe
plt.figure(figsize=(12,6))
sns.heatmap(df.isnull(), cbar=False)
plt.show()
# Drop the two categorical features
df.drop(df[categories], axis=1, inplace=True)
# Replace missings of numerical variables with median
df.fillna(df.median(), inplace=True)
# Visualize missings pattern of the dataframe
print(df.shape)
plt.figure(figsize=(12,6))
sns.heatmap(df.isnull(), cbar=False)
plt.show()
# Filtering the features with 0 variance
no_var = df.var() == 0
print(df.var()[no_var])
print('\n')

# Drop features with 0 variance --- these features will not help in the performance of the model
df.drop(df.var()[no_var].index, axis = 1, inplace = True)
print(df.var())
print(df.shape)
df.info()
# Recheck the Correlation matrix
corr = df.corr()

mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)]=True
with sns.axes_style('white'):
  fig, ax = plt.subplots(figsize=(18,10))
  sns.heatmap(corr,  mask=mask, annot=False, cmap='CMRmap', center=0, linewidths=0.1, square=True)
  drop = ['total transactions (including tnx to create contract', 'total ether sent contracts', 'max val sent to contract', ' ERC20 avg val rec',
        ' ERC20 avg val rec',' ERC20 max val rec', ' ERC20 min val rec', ' ERC20 uniq rec contract addr', 'max val sent', ' ERC20 avg val sent',
        ' ERC20 min val sent', ' ERC20 max val sent', ' Total ERC20 tnxs', 'avg value sent to contract', 'Unique Sent To Addresses',
        'Unique Received From Addresses', 'total ether received', ' ERC20 uniq sent token name', 'min value received', 'min val sent', ' ERC20 uniq rec addr' ]
df.drop(drop, axis=1, inplace=True)
# Recheck the Correlation matrix
corr = df.corr()

mask = np.zeros_like(corr)
mask[np.triu_indices_from(mask)]=True
with sns.axes_style('white'):
  fig, ax = plt.subplots(figsize=(18,10))
  sns.heatmap(corr,  mask=mask, annot=False, cmap='CMRmap', center=0, linewidths=0.1, square=True)


columns = df.columns
columns


# Investigate the distribution of our features using boxplots
b=20

fig, axes = plt.subplots(6, 3, figsize=(14, 14), constrained_layout =True)
plt.subplots_adjust(wspace = 0.5, hspace=0.8)
plt.suptitle("Distribution of features",y=0.95, size=18, weight='bold')

ax = sns.boxplot(ax = axes[0,0], data=df, x=columns[1])
ax.set_title(f'Distribution of {columns[1]}')

ax1 = sns.boxplot(ax = axes[0,1], data=df, x=columns[2])
ax1.set_title(f'Distribution of {columns[2]}')

ax2 = sns.boxplot(ax = axes[0,2], data=df, x=columns[3])
ax2.set_title(f'Distribution of {columns[3]}')

ax3 = sns.boxplot(ax = axes[1,0], data=df, x=columns[4])
ax3.set_title(f'Distribution of {columns[4]}')

ax4 = sns.boxplot(ax = axes[1,1], data=df, x=columns[5])
ax4.set_title(f'Distribution of {columns[5]}')

ax5 = sns.boxplot(ax = axes[1,2], data=df, x=columns[6])
ax5.set_title(f'Distribution of {columns[6]}')

ax6 = sns.boxplot(ax = axes[2,0], data=df, x=columns[7])
ax6.set_title(f'Distribution of {columns[7]}')

ax7 = sns.boxplot(ax = axes[2,1], data=df, x=columns[8])
ax7.set_title(f'Distribution of {columns[8]}')

ax8 = sns.boxplot(ax = axes[2,2], data=df, x=columns[9])
ax8.set_title(f'Distribution of {columns[9]}')

ax9 = sns.boxplot(ax = axes[3,0], data=df, x=columns[10])
ax9.set_title(f'Distribution of {columns[10]}')

ax10 = sns.boxplot(ax = axes[3,1], data=df, x=columns[11])
ax10.set_title(f'Distribution of {columns[11]}')

ax11 = sns.boxplot(ax = axes[3,2], data=df, x=columns[12])
ax11.set_title(f'Distribution of {columns[12]}')

ax12 = sns.boxplot(ax = axes[4,0], data=df, x=columns[13])
ax12.set_title(f'Distribution of {columns[13]}')

ax13 = sns.boxplot(ax = axes[4,1], data=df, x=columns[14])
ax13.set_title(f'Distribution of {columns[14]}')

ax14 = sns.boxplot(ax = axes[4,2], data=df, x=columns[15])
ax14.set_title(f'Distribution of {columns[15]}')

ax15 = sns.boxplot(ax = axes[5,0], data=df, x=columns[16])
ax15.set_title(f'Distribution of {columns[16]}')

ax16 = sns.boxplot(ax = axes[5,1], data=df, x=columns[17])
ax16.set_title(f'Distribution of {columns[17]}')

ax17 = sns.boxplot(ax = axes[5,2], data=df, x=columns[18])
ax17.set_title(f'Distribution of {columns[18]}')

plt.show()


# Some features present a small distribution
for i in df.columns[1:]:
  if len(df[i].value_counts()) < 10:
    print(f'The column {i} has the following distribution: \n{df[i].value_counts()}')
    print('======================================')


drops = ['min value sent to contract', ' ERC20 uniq sent addr.1']
df.drop(drops, axis=1, inplace=True)
print(df.shape)
df.head()


##Data preparation
y = df.iloc[:, 0]
X = df.iloc[:, 1:]
print(X.shape, y.shape)
# Split into training (80%) and testing set (20%)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)

# Normalize the training features
norm = PowerTransformer()
norm_train_f = norm.fit_transform(X_train)
norm_df = pd.DataFrame(norm_train_f, columns=X_train.columns)
norm_df

# Distribution of features after log transformation

b=20

fig, axes = plt.subplots(6, 3, figsize=(14, 14), constrained_layout =True)
plt.subplots_adjust(wspace = 0.5, hspace=0.8)
axes[-1, -1].axis('off') # hide axes
axes[-1, -2].axis('off') # hide axes
plt.suptitle("Distribution of features after log",y=0.95, family='Sherif', size=18, weight='bold')

ax = sns.boxplot(ax = axes[0,0], data=norm_df, x=norm_df.columns[0])
ax.set_title(f'Distribution of {norm_df.columns[0]}')

ax1 = sns.boxplot(ax = axes[0,1], data=norm_df, x=norm_df.columns[1])
ax1.set_title(f'Distribution of {norm_df.columns[1]}')

ax2 = sns.boxplot(ax = axes[0,2], data=norm_df, x=norm_df.columns[2])
ax2.set_title(f'Distribution of {norm_df.columns[2]}')

ax3 = sns.boxplot(ax = axes[1,0], data=norm_df, x=norm_df.columns[3])
ax3.set_title(f'Distribution of {norm_df.columns[3]}')

ax4 = sns.boxplot(ax = axes[1,1], data=norm_df, x=norm_df.columns[4])
ax4.set_title(f'Distribution of {norm_df.columns[4]}')

ax5 = sns.boxplot(ax = axes[1,2], data=norm_df, x=norm_df.columns[5])
ax5.set_title(f'Distribution of {norm_df.columns[5]}')

ax6 = sns.boxplot(ax = axes[2,0], data=norm_df, x=norm_df.columns[6])
ax6.set_title(f'Distribution of {norm_df.columns[6]}')

ax7 = sns.boxplot(ax = axes[2,1], data=norm_df, x=norm_df.columns[7])
ax7.set_title(f'Distribution of {norm_df.columns[7]}')

ax8 = sns.boxplot(ax = axes[2,2], data=norm_df, x=norm_df.columns[8])
ax8.set_title(f'Distribution of {norm_df.columns[8]}')

ax9 = sns.boxplot(ax = axes[3,0], data=norm_df, x=norm_df.columns[9])
ax9.set_title(f'Distribution of {norm_df.columns[9]}')

ax10 = sns.boxplot(ax = axes[3,1], data=norm_df, x=norm_df.columns[10])
ax10.set_title(f'Distribution of {norm_df.columns[10]}')

ax11 = sns.boxplot(ax = axes[3,2], data=norm_df, x=norm_df.columns[11])
ax11.set_title(f'Distribution of {norm_df.columns[11]}')

ax12 = sns.boxplot(ax = axes[4,0], data=norm_df, x=norm_df.columns[12])
ax12.set_title(f'Distribution of {norm_df.columns[12]}')

ax13 = sns.boxplot(ax = axes[4,1], data=norm_df, x=norm_df.columns[13])
ax13.set_title(f'Distribution of {norm_df.columns[13]}')

ax14 = sns.boxplot(ax = axes[4,2], data=norm_df, x=norm_df.columns[14])
ax14.set_title(f'Distribution of {norm_df.columns[14]}')

ax15 = sns.boxplot(ax = axes[5,0], data=norm_df, x=norm_df.columns[15])
ax15.set_title(f'Distribution of {norm_df.columns[15]}')

plt.show()

####   Handling the imbalance
###   Oversampling using SMOTE


oversample = SMOTE()
print(f'Shape of the training before SMOTE: {norm_train_f.shape, y_train.shape}')

x_tr_resample, y_tr_resample = oversample.fit_resample(norm_train_f, y_train)
print(f'Shape of the training after SMOTE: {x_tr_resample.shape, y_tr_resample.shape}')

# Target distribution before SMOTE
non_fraud = 0
fraud = 0

for i in y_train:
  if i == 0:
    non_fraud +=1
  else:
    fraud +=1

# Target distribution after SMOTE
no = 0
yes = 1

for j in y_tr_resample:
  if j == 0:
    no +=1
  else:
    yes +=1


print(f'BEFORE OVERSAMPLING \n \tNon-frauds: {non_fraud} \n \tFauds: {fraud}')
print(f'AFTER OVERSAMPLING \n \tNon-frauds: {no} \n \tFauds: {yes}')

#### Modeling
#### Random Forest Classifier

RF = RandomForestClassifier(random_state=42)
RF.fit(x_tr_resample, y_tr_resample)
preds_RF = RF.predict(norm_test_f)

print(classification_report(y_test, preds_RF))
print(confusion_matrix(y_test, preds_RF))
plot_confusion_matrix(RF, norm_test_f, y_test)

# Plot confusion matrix
cm = confusion_matrix(y_true, y_pred)
plt.matshow(cm, cmap='Blues')
plt.colorbar()
plt.show()

