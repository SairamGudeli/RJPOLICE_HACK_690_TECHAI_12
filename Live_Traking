#### This is small Part of Our code we are working on code ####

import requests
import time
from datetime import datetime
import matplotlib.pyplot as plt

# List of cryptocurrencies to track
crypto_list = ['bitcoin', 'ethereum', 'litecoin', 'ripple', 'bitcoin-cash']

def get_crypto_data(crypto):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}"
    response = requests.get(url)
    data = response.json()
    return data

def get_crypto_price(crypto_data):
    price = crypto_data['market_data']['current_price']['usd']
    return price

def display_price_history(crypto, days=30, interval="daily"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    response = requests.get(url)
    data = response.json()
    prices = data['prices']

    dates = [item[0] for item in prices]
    dates = [datetime.fromtimestamp(date/1000.0).strftime('%Y-%m-%d') for date in dates]

    prices = [item[1] for item in prices]

    plt.plot(dates, prices)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'Price History of {crypto}')
    plt.show()

def live_track_and_show_history(crypto, show_history=True):
    crypto_data = get_crypto_data(crypto)
    print(f"The current price of {crypto} is ${get_crypto_price(crypto_data)}")

    if show_history:
        display_price_history(crypto)

while True:
    user_choice = input("Enter a cryptocurrency to track (q to quit): ").lower()

    if user_choice == "q":
        break

    live_track_and_show_history(user_choice)
    time.sleep(60)

print("Bye!")






#GUI
#### This is small Part of Our code we are working on code ####

import requests
import time
from datetime import datetime
import matplotlib.pyplot as plt

# List of cryptocurrencies to track
crypto_list = ['bitcoin', 'ethereum', 'litecoin', 'ripple', 'bitcoin-cash']

def get_crypto_data(crypto):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}"
    response = requests.get(url)
    data = response.json()
    return data

def get_crypto_price(crypto_data):
    price = crypto_data['market_data']['current_price']['usd']
    return price

def display_price_history(crypto, days=30, interval="daily"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    response = requests.get(url)
    data = response.json()
    prices = data['prices']

    dates = [item[0] for item in prices]
    dates = [datetime.fromtimestamp(date/1000.0).strftime('%Y-%m-%d') for date in dates]

    prices = [item[1] for item in prices]

    plt.plot(dates, prices)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'Price History of {crypto}')
    plt.show()

def live_track_and_show_history(crypto, show_history=True):
    crypto_data = get_crypto_data(crypto)
    print(f"The current price of {crypto} is ${get_crypto_price(crypto_data)}")

    if show_history:
        display_price_history(crypto)

while True:
    user_choice = input("Enter a cryptocurrency to track (q to quit): ").lower()

    if user_choice == "q":
        break

    live_track_and_show_history(user_choice)
    time.sleep(60)

print("Bye!")






#GUI
import tkinter
from tkinter import ttk
from tkinter import PhotoImage
import requests
from datetime import datetime
import matplotlib.pyplot as plt
import pandas as pd

root = tkinter.Tk()
root.title("Cryptocurrency Flow Investigation")
root.geometry("900x500")

text_label = tkinter.Label(root, text="Cryptocurrency Flow Investigation", font=("Time Of Roman", 18))
text_label.pack()

# Create PhotoImage instance
image_path = PhotoImage(file=r"C:\Users\admin\Downloads\1424856.png")  # Replace with your image path
bg_image = tkinter.Label(root, image=image_path)
bg_image.place(relheight=1, relwidth=1)

text_label = tkinter.Label(root, text="Cryptocurrency Flow Investigation", font=("Time Of Roman", 40))
text_label.pack()

# Combobox options
crypto_options = ["Bitcoin", "Ethereum", "Litecoin", "USD", "Binancecoin", "Ripple", "Solana", "Cardano",
                  "Polkadot", "Dogecoin", "Tron", "Chainlink", "Polygon", "Shiba", "Dai",
                  "bitcoincash", "Cosmos", ]  # Add more options as needed

# Variable to store selected cryptocurrency
selected_crypto = tkinter.StringVar()

# Function to handle Combobox selection
def on_crypto_select(event):
    selected_crypto.set(crypto_combobox.get())

# Create Combobox
crypto_combobox = ttk.Combobox(root, values=crypto_options, textvariable=selected_crypto, font=("Time Of Roman", 19))
crypto_combobox.set("Select Cryptocurrency")  # Set default text
crypto_combobox.pack(pady=20, padx=20, side=tkinter.TOP)
crypto_combobox.bind("<<ComboboxSelected>>", on_crypto_select)

def button1_click():
    crypto_to_track = selected_crypto.get().lower()  # Use the selected cryptocurrency
    live_track_and_show_history(crypto_to_track)

def button2_click():
    # Your code for button 2 here
    new_window = tkinter.Toplevel(root)
    new_window.title("Law and Rules")
    new_window.geometry("800x600")

    # Create and set background image for the new window
    new_image_path = PhotoImage(file="C:/Users/admin/Downloads/WhatsApp Image 2023-12-19 at 18.37.43_e85cbd8b.png")  # Replace with your image path
    new_bg_image = tkinter.Label(new_window, image=new_image_path)
    new_bg_image.place(relheight=1, relwidth=1)

    # Create and display content in the new window
    label = tkinter.Label(new_window, text="Summary of Cryptocurrency Regulation in India (2024):\n\n"
                                           "1. VDAs as Legal Tender:\n"
                                           "   • VDAs are not expressly regulated or prohibited.\n"
                                           "   • Individuals and entities allowed to hold, invest, and transact VDAs under existing laws.\n"
                                           "   • Government does not recognize cryptocurrencies as legal tender but acknowledges their dual nature.\n"
                                           "   • 2020 Supreme Court judgment highlights the evolving global understanding of VDAs.\n\n"
                                           "2. Sales Regulation:\n"
                                           "   • Legacy legislation triggers in certain circumstances.\n"
                                           "   • Regulatory mechanism based on VDA use case, treated as commodities/assets in some scenarios.\n"
                                           "   • Advertising guidelines set by the Advertising Standards Council of India in 2022.\n\n"
                                           "3. Taxation:\n"
                                           "   • Income from VDA trade subject to both direct (income tax) and indirect (GST) taxation.\n"
                                           "   • Finance Act 2022 introduces a 30% tax on income from VDA transfers.\n"
                                           "   • Guidelines for Exchanges and P2P transactions regarding withholding tax and GST.\n\n"
                                           "4. Money Transmission Laws and AML Requirements:\n"
                                           "   • RBI circulars regulate entities handling VDAs, following KYC, AML, and CFT requirements.\n"
                                           "   • Supreme Court overturns the ban on regulated entities dealing with VDAs.\n"
                                           "   • PMLA scope expanded to cover various VDA-related aspects, emphasizing regulatory oversight.\n"
                                           "   • CERT-In issues directions for virtual asset service providers, exchange providers, and custodian wallet providers to maintain KYC and transaction records for five years.\n\n"
                                           "5. Central Bank Digital Currency (CBDC):\n"
                                           "   • RBI initiates the e-Rupee CBDC pilot, broadening the definition of 'bank note' to include digital forms.\n\n"
                                           "6. RBI on Macro-Financial Risks:\n"
                                           "   • RBI addresses risks associated with VDAs, proposing three policy approaches: prohibition, containment, and regulation.\n"
                                           "   • Global coordination needed for evaluating risks, especially in Emerging Markets and Developing Economies.",
                            font=("Time Of Roman", 12), justify=tkinter.LEFT)
    label.pack(pady=20)

def button3_click():
    # Your code for button 3 here
    print("Button 3 clicked")


def button4_click():
    # Your code for button 4 here
    print("Button 4 clicked")

def button5_click():
    crypto_to_track = selected_crypto.get().lower()  # Use the selected cryptocurrency
    watch_trading_window(crypto_to_track)
    
def get_crypto_data(crypto):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}"
    response = requests.get(url)
    data = response.json()
    return data

def get_crypto_price(crypto_data):
        price = crypto_data['market_data']['current_price']['usd']
        return price
    
def display_price_history(crypto, days=30, interval="daily"):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto}/market_chart?vs_currency=usd&days={days}&interval={interval}"
    response = requests.get(url)
    data = response.json()
    prices = data['prices']

    dates = [item[0] for item in prices]
    dates = [datetime.fromtimestamp(date / 1000.0).strftime('%Y-%m-%d') for date in dates]

    prices = [item[1] for item in prices]

    plt.plot(dates, prices)
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title(f'Price History of {crypto}')
    plt.show()

def live_track_and_show_history(crypto, show_history=True):
    crypto_data = get_crypto_data(crypto)

    if crypto_data is not None:
        current_price = get_crypto_price(crypto_data)
        if current_price is not None:
            print(f"The current price of {crypto} is ${current_price}")

            if show_history:
                display_price_history(crypto)

def get_transaction_details(api_key, transaction_id):
    base_url = f'https://api.blockchair.com/bitcoin/dashboards/transaction/{transaction_id}'

    try:
        response = requests.get(base_url, params={'key': api_key})
        response.raise_for_status()  # Raise HTTPError for bad responses
    except requests.exceptions.RequestException as err:
        print(f"Error: {err}")
        return None

    transaction_data = response.json()
    return transaction_data

def is_fraudulent(transaction_details):
    # Placeholder for basic fraud detection rules
    # Add your custom rules based on transaction features
    if 'inputs' in transaction_details and 'outputs' in transaction_details:
        if len(transaction_details['inputs']) > 10 or len(transaction_details['outputs']) > 10:
            return True

    return False

def detect_and_report_fraud(api_key, transaction_id):
    transaction_details = get_transaction_details(api_key, transaction_id)

    if transaction_details:
        if is_fraudulent(transaction_details):
            return f"Warning: Transaction {transaction_id} may be fraudulent."
        else:
            return f"Transaction {transaction_id} appears to be normal."
    else:
        return "Error: Unable to fetch transaction details."
def watch_trading_window(crypto):
    watch_window = tkinter.Toplevel(root)
    watch_window.title(f"Watch Trading - {crypto.capitalize()}")
    watch_window.geometry("800x600")

    # Your code for watching trading goes here
    # You can display real-time data, charts, or any other relevant information
    import pandas as pd

    # Load the dataset into a dataframe
    df = pd.read_csv("C:/Users/admin/Downloads/transaction_dataset 1.csv")

    # Perform data preprocessing if needed

    # Analyze trading patterns
    df['Avg_min_between_sent_tnx'] = df['Avg min between sent tnx']
    df['Avg_min_between_received_tnx'] = df['Avg min between received tnx']
    df['Time_diff_between_first_last'] = df['Time Diff between first and last (Mins)']

    # Identify suspicious transactions
    df['Sent_tnx_count'] = df['Sent tnx']
    df['Received_tnx_count'] = df['Received Tnx']
    df['Created_contracts_count'] = df['Number of Created Contracts']

    # Look for abnormal behavior
    df['Min_val_received'] = df['min value received']
    df['Max_val_received'] = df['max value received']
    df['Avg_val_received'] = df['avg val received']
    df['Min_val_sent'] = df['min val sent']
    df['Max_val_sent'] = df['max val sent']
    df['Avg_val_sent'] = df['avg val sent']
    df['Min_val_sent_to_contract'] = df['min value sent to contract']
    df['Max_val_sent_to_contract'] = df['max val sent to contract']
    df['Avg_val_sent_to_contract'] = df['avg value sent to contract']
    df['Total_transactions'] = df['total transactions (including tnx to create contract)']
    df['Total_ether_sent'] = df['total Ether sent']
    df['Total_ether_received'] = df['total ether received']
    df['Total_ether_sent_contracts'] = df['total ether sent contracts']
    df['Total_ether_balance'] = df['total ether balance']

    # Look for wash trading indicators

    # Example: addresses with a high number of transactions but a low total ether balance
    potential_wash_traders = df[(df['Total_transactions'] > 100) & (df['Total_ether_balance'] < 10)]

    # Print potential wash traders
    print(potential_wash_traders[['Address', 'Total_transactions', 'Total_ether_balance']])

button1 = tkinter.Button(root, text="Track Crypto", command=button1_click, bg="black", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button1.pack(pady=10, padx=10, side=tkinter.TOP)

button2 = tkinter.Button(root, text="Law and Rules", command=button2_click, bg="red", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button2.pack(pady=10, padx=10, side=tkinter.TOP)

button3 = tkinter.Button(root, text="Fraud Detection", command=button3_click, bg="yellow", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button3.pack(pady=10, padx=10, side=tkinter.TOP)

button4 = tkinter.Button(root, text="Education", command=button4_click, bg="orange", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button4.pack(pady=10, padx=10, side=tkinter.TOP)

button5 = tkinter.Button(root, text="Watch Trading", command=button5_click, bg="green", fg="white", width=20, height=2,
                         font=("Time Of Roman", 19))
button5.pack(pady=10, padx=10, side=tkinter.TOP)

root.mainloop()
